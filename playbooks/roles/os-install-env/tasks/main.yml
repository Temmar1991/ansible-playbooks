---
- name: Install python
  raw: "test -e /usr/bin/python || (apt-get install -y python)"

- name: Populate /etc/hosts with aliases
  lineinfile:
    path: /etc/hosts
    line: "{{ ansible_ssh_host }} controller compute1 block1 {{ ansible_hostname }}"

- name: Comment out entry 127.0.1.1 to prevent name resolution problems
  replace:
    path: /etc/hosts
    regexp: '^(127.0.1.1.*)'
    replace: '#\1'

- name: Install chrony
  apt:
    name: chrony
    state: present
  register: apt_chrony_package_install_status

- name: Populate /etc/chrony.conf 
  lineinfile:
    path: /etc/chrony.conf
    line: "{{ item }} iburst"
    create: yes
  with_items:
    - "0.ua.pool.ntp.org"
    - "1.ua.pool.ntp.org"
    - "2.ua.pool.ntp.org"

- name: Enable and start chrony
  service:
    name: chrony
    state: restarted
    enabled: yes
  when: apt_chrony_package_install_status.changed

- name: Install software-properties-common and aptitude
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - software-properties-common
    - aptitude

- name: Install ubuntu cloud keyring
  apt:
    pkg: ubuntu-cloud-keyring
    state: present

- name: Add pike repository
  apt_repository:
    repo: "deb http://ubuntu-cloud.archive.canonical.com/ubuntu xenial-updates/pike main"
    update_cache: yes

- name: Update and upgrade packages
  apt:
    update_cache: yes
    upgrade: dist

- name: Install python-openstackclient
  apt:
    name: python-openstackclient
    state: present

- name: Install mariadb and dependencies
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - mariadb-server
    - python-pymysql
    - python-mysqldb
  register: apt_mariadb_package_install_status

- name: Populate and copy template for mariadb
  template:
    src: "99-openstack.cnf.j2"
    dest: /etc/mysql/mariadb.conf.d/99-openstack.cnf
    mode: 0644

- name: Restart mariadb
  service:
    name: mysql
    state: restarted
  when: apt_mariadb_package_install_status.changed

- name: Update mysql root password for all root accounts from local
  mysql_user:
    login_user: root
    name: root
    host: "{{ item }}"
    password: "{{ os_env_mysql_root_password }}"
    priv: '*.*:ALL,GRANT'
  with_items:
    - "{{ inventory_hostname }}"
    - "127.0.0.1"
    - "::1"
    - "localhost"
  when: apt_mariadb_package_install_status.changed

- name: Ensure anonymous users are not in the database
  mysql_user: name='' host={{ item }} state=absent
  with_items:
    - "{{ inventory_hostname }}"
    - "127.0.0.1"
    - "::1"
    - "localhost"

- name: Remove the test database
  mysql_db: name=test state=absent

- name: Install RabbitMQ message queue
  apt:
    name: rabbitmq-server
    state: present
  register: apt_rabbitmq_package_install_status

- name: Add user openstack to RabbitMQ
  rabbitmq_user:
    user: openstack
    password: "{{ os_env_rabbitmq_openstack_password }}"
    permissions:
      - vhost: /
        configure_priv: .*
        read_priv: .*
        write_priv: .*
    state: present
  when: apt_rabbitmq_package_install_status.changed

- name: Install memcached
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - memcached
    - python-memcache

- name: Update /etc/memcached.conf
  lineinfile:
    path: /etc/memcached.conf
    regexp: '^-l 127.0.0.1$'
    line: "-l {{ ansible_ssh_host }}"
    backrefs: yes
  register: memcached_conf_update_status

- name: Restart memcached
  service:
    name: memcached
    state: restarted
  when: memcached_conf_update_status.changed

- name: Create group for etcd
  group:
    name: etcd
    system: yes

- name: Create user for etcd
  user:
    name: etcd
    group: etcd
    shell: /bin/false
    system: yes
    home: /var/lib/etcd

- name: Create necessary directories for etcd
  file:
    path: "{{ item }}"
    state: directory
    owner: etcd
    group: etcd
  with_items:
    - /etc/etcd
    - /var/lib/etcd
    - /tmp/etcd

- name: Download etcd tarball
  get_url:
    url: "https://github.com/coreos/etcd/releases/download/{{ os_env_etcd_version }}/etcd-{{ os_env_etcd_version }}-linux-amd64.tar.gz"
    dest: /tmp
  register: etcd_tarball_download_status

- name: Unarchive etcd tarball
  shell: "tar xzvf /tmp/etcd-{{ os_env_etcd_version }}-linux-amd64.tar.gz -C /tmp/etcd --strip-components=1"
  register: etcd_tarball_unarchive_status
  when: etcd_tarball_download_status.changed

- name: Copy extracted etcd to system folders
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0755
  remote_src: yes
  with_items:
    - { src: "/tmp/etcd/etcd", dest: "/usr/bin/etcd" }
    - { src: "/tmp/etcd/etcdctl", dest: "/usr/bin/etcdctl" }
  when: etcd_tarball_unarchive_status.changed
  
- name: Populate and copy templates for etcd
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
  with_items:
    - { src: "etcd.conf.yml.j2", dest: "/etc/etcd/etcd.conf.yml" }
    - { src: "etcd.service.j2", dest: "/lib/systemd/system/etcd.service" }

- name: Enable and start etcd service
  service:
    name: etcd
    state: started
    enabled: yes
